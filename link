#!/usr/bin/env ruby
# frozen_string_literal: true

Thread.current.name = 'main'
require 'rubygems'
require 'bundler/setup'

################################################################################

require 'benchmark'
require 'json'
require 'logger'
require 'ostruct'
require 'pp'
require 'securerandom'
require 'socket'
require 'zlib'

require 'awesome_print'


require 'prometheus/client'
require 'prometheus/client/push'
$prometheus = Prometheus::Client.registry

$storage_item_count = Prometheus::Client::Gauge.new(:storage_item_count, docstring: '...', labels: [:name])
$prometheus.register($storage_item_count)

$storage_delta_count = Prometheus::Client::Gauge.new(:storage_delta_count, docstring: '...', labels: [:name])
$prometheus.register($storage_delta_count)

$electrical_count = Prometheus::Client::Gauge.new(:electrical_count, docstring: '...', labels: [:name])
$prometheus.register($electrical_count)

$electrical_delta_count = Prometheus::Client::Gauge.new(:electrical_delta_count, docstring: '...', labels: [:name])
$prometheus.register($electrical_delta_count)

$metric_thread_count = Prometheus::Client::Gauge.new(:thread_count, docstring: '...')
$prometheus.register($metric_thread_count)

$thread_execution = Prometheus::Client::Histogram.new(:thread_execution, docstring: '...', labels: [:name])
$prometheus.register($thread_execution)

$thread_timing = Prometheus::Client::Gauge.new(:thread_timing, docstring: '...', labels: [:name])
$prometheus.register($thread_timing)

$server_rtt = Prometheus::Client::Gauge.new(:server_rtt, docstring: '...', labels: [:name])
$prometheus.register($server_rtt)

################################################################################

# SLEEP_TIME = 0.0001
SLEEP_TIME = 0.001
LINK_ROOT = Dir.pwd
INT_32_MAX = (2**32).div(2) - 1
GIGAJOULE = 10 ** 9

# STDOUT.sync = true
# Thread.abort_on_exception = true


################################################################################

require_relative "lib/support/logger"

require_relative 'lib/support'
require_relative 'lib/servers'
require_relative 'lib/tasks'
require_relative 'lib/factorio'

# $logger.level = Logger::INFO

################################################################################

################################################################################

require_relative 'lib/options'

################################################################################


################################################################################
